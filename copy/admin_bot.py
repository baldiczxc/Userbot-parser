from pyrogram.filters import channel
from io import BytesIO
from config import admin_id, bot_token
from database import *
from keyboards import *
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
import pandas as pd

bot = Bot(bot_token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class MarkState(StatesGroup):
    waiting_for_mark = State()

async def check_is_admin(chat_id):
    adm_id = await get_user_admin_id(chat_id)
    return True if adm_id == admin_id else False

@dp.message_handler(commands=["start"])
async def start(msg: types.Message):
    chat_id = msg.chat.id
    if not await check_is_admin(chat_id):
        return
    await bot.send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à–µ–≥–æ <b>–ª–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞</b> –¥–ª—è –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è —é–∑–µ—Ä–±–æ—Ç–æ–º <b>KTU-Bot</b>", reply_markup=await start_cl(), parse_mode="HTML")

@dp.message_handler(lambda message: message.text == "–ú–µ–Ω—é üè†")
async def menu_handler(msg: types.Message):
    await show_main_menu(msg)

async def show_main_menu(msg):
    chat_id = msg.chat.id
    if not await check_is_admin(chat_id):
        return

    await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—é—é –≤–∞—Å —Ñ—É–Ω–∫—Ü–∏—é:", reply_markup=await menu_cl())

@dp.callback_query_handler(lambda c: c.data == 'chats' or c.data == 'back_to_chats')
async def userbots_callback(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    message_id = callback_query.message.message_id
    await bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —á–∞—Ç–æ–≤:", chat_id, message_id, reply_markup=await chat_types_cb())


@dp.callback_query_handler(lambda c: c.data == 'export')
async def userbots_callback(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    user_chats = await get_user_chats_from_db(chat_id, chat_type="groups")
    channel_chats = await get_user_chats_from_db(chat_id, chat_type="channels")
    supergroup_chats = await get_user_chats_from_db(chat_id, chat_type="supergroups")

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Ç—ã –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫ –∏ —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ 'id'
    all_chats = user_chats + supergroup_chats + channel_chats
    unique_chats = {chat['id']: chat for chat in all_chats}.values()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–∞–∫ –∫–ª—é—á –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∞—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü—É (DataFrame)
    data = []
    for chat in unique_chats:
        chat_id = chat['id']
        title = chat['title'] if isinstance(chat['title'], str) else chat['title'].get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        data.append([chat_id, title])

    # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    df = pd.DataFrame(data, columns=["Chat ID", "Title"])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º DataFrame –≤ Excel
    output = BytesIO()
    df.to_excel(output, index=False, engine='openpyxl')
    output.seek(0)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_document(
        chat_id=callback_query.from_user.id,
        document=output,
        caption="user_chats.xlsx",  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ
        filename="user_chats.xlsx",  # –£–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ filename
        content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"  # –£–∫–∞–∑—ã–≤–∞–µ–º MIME —Ç–∏–ø
    )


@dp.callback_query_handler(lambda c: c.data == 'back_to_channels' or c.data == 'back_to_groups', state="*")
async def userbots_callback(callback_query: types.CallbackQuery, state: FSMContext):
    chat_id = callback_query.message.chat.id
    message_id = callback_query.message.message_id

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ —á–∞—Ç–æ–≤
    await bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —á–∞—Ç–æ–≤:",
        chat_id,
        message_id,
        reply_markup=await chat_types_cb()  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —á–∞—Ç–æ–≤
    )

async def convert_to_excel(data):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
    df = pd.DataFrame(data)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
    df.to_excel("output.xlsx", index=False, engine='openpyxl')
    print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª output.xlsx")

@dp.callback_query_handler(lambda c: c.data == 'chats_groups')
async def userbots_callback(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    message_id = callback_query.message.message_id
    user_chats = await get_user_chats_from_db(chat_id, chat_type="groups")
    supergroup_chats = await get_user_chats_from_db(chat_id, chat_type="supergroups")
    user_chats.extend(supergroup_chats)
    print(user_chats)
    try:
        user_chats = [json.loads(chat) if isinstance(chat, str) else chat for chat in user_chats]
    except json.JSONDecodeError as e:
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=str(chat["title"]) if isinstance(chat["title"], str) else str(chat["title"].get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")),
                callback_data=f"chat_groups_{chat['id']}"
            )]
            for chat in user_chats
        ] + [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_chats")]]
    )

    await bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç:", chat_id=chat_id, message_id=message_id, reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data.startswith("chat_"))
async def handle_chat_selection(callback_query: types.CallbackQuery):
    try:
        data_parts = callback_query.data.split("_")

        chat_type = data_parts[1]
        chat_id = int(data_parts[2])

        print(f"Chat ID: {chat_id}, Chat Type: {chat_type}")

        user_id = callback_query.from_user.id
        print(f"User ID: {user_id}")

        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç—ã —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ —á–∞—Ç–∞
        user_chats = await get_user_chats_from_db(user_id, chat_type=chat_type)
        selected_chat = next((chat for chat in user_chats if chat["id"] == chat_id), None)

        if not selected_chat:
            await bot.answer_callback_query(callback_query.id, text="–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞
        chat_title = selected_chat["title"]["title"] if isinstance(selected_chat["title"], dict) else selected_chat["title"]

        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∫–∏ –¥–ª—è —á–∞—Ç–∞
        marks = await get_marks(admin_id, chat_id, f"{chat_type}_mark")
        marks_text = "–ú–µ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç." if not marks else "–¢–µ–∫—É—â–∏–µ –º–µ—Ç–∫–∏:\n" + "\n".join(f"- {mark}" for mark in marks)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Ç–∫–∞–º–∏
        keyboard = InlineKeyboardMarkup()
        keyboard.row(
            InlineKeyboardButton(text="‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–∫—É", callback_data=f"add_mark_{chat_type}_{chat_id}"),
            InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–µ—Ç–∫—É", callback_data=f"remove_mark_{chat_type}_{chat_id}")
        )
        keyboard.row(
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"chats_{chat_type}")
        )

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–∞—Ç–µ –∏ –º–µ—Ç–∫–∞—Ö
        await bot.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {chat_type} —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º: {chat_title}\n\n{marks_text}",
            chat_id=user_id,
            message_id=callback_query.message.message_id,
            reply_markup=keyboard,
        )

    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        await bot.answer_callback_query(callback_query.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@dp.callback_query_handler(lambda c: c.data.startswith("add_mark_"))
async def add_mark_callback(callback_query: types.CallbackQuery, state: FSMContext):
    data_parts = callback_query.data.split("_")
    chat_type = data_parts[2]
    chat_id = int(data_parts[3])
    user_id = callback_query.from_user.id


    user_chats = await get_user_chats_from_db(user_id, chat_type=chat_type)
    selected_chat = next((chat for chat in user_chats if chat["id"] == chat_id), None)

    if not selected_chat:
        await bot.answer_callback_query(callback_query.id, text="–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return


    chat_title = selected_chat["title"] if isinstance(selected_chat["title"], str) else selected_chat["title"].get(
        "title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")


    await bot.answer_callback_query(callback_query.id)
    await state.set_state(MarkState.waiting_for_mark)


    await state.update_data(chat_id=chat_id)

    if chat_type == "channel":
        kb = await chan_back_cb()
    else:
        kb = await grop_back_cb()
    await bot.edit_message_text(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –º–µ—Ç–∫—É –¥–ª—è {chat_type} —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º: {chat_title}:",
        chat_id=user_id,
        message_id=callback_query.message.message_id,
        reply_markup= kb
    )


@dp.message_handler(state=MarkState.waiting_for_mark)
async def process_new_mark(msg: types.Message, state: FSMContext):
    new_mark = msg.text.strip()
    user_id = msg.from_user.id

    data = await state.get_data()
    chat_id = data.get("chat_id")

    if not chat_id:
        await bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if not new_mark:
        await bot.send_message(user_id, "–ú–µ—Ç–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    existing_marks = await get_marks(admin_id, chat_id, f"groups_mark")

    if new_mark in existing_marks:
        await bot.send_message(user_id, f"–ú–µ—Ç–∫–∞ '{new_mark}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞.")
        return

    await add_mark(admin_id, chat_id, f"groups_mark", new_mark)

    marks = await get_marks(admin_id, chat_id, f"groups_mark")
    marks_text = "–ú–µ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç." if not marks else "–¢–µ–∫—É—â–∏–µ –º–µ—Ç–∫–∏:\n" + "\n".join(f"- {mark}" for mark in marks)

    await state.finish()

    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton(text="‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–∫—É", callback_data=f"add_mark_groups_{chat_id}"),
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–µ—Ç–∫—É", callback_data=f"remove_mark_groups_{chat_id}")
    )
    keyboard.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"chats_groups")
    )
    await add_column("users", new_mark)
    await bot.send_message(
        user_id,
        f"–ú–µ—Ç–∫–∞ '{new_mark}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.\n\n{marks_text}",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data.startswith("remove_mark_"))
async def remove_mark_callback(callback_query: types.CallbackQuery):
    data_parts = callback_query.data.split("_")
    chat_type = data_parts[2]
    chat_id = int(data_parts[3])
    user_id = callback_query.from_user.id

    marks = await get_marks(admin_id, chat_id, f"{chat_type}_mark")
    if not marks:
        await bot.answer_callback_query(callback_query.id, text="–ù–µ—Ç –º–µ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=mark, callback_data=f"confirm_remove_mark_{chat_type}_{chat_id}_{mark}")]
            for mark in marks
        ]
    )

    await bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        chat_id=user_id,
        message_id=callback_query.message.message_id,
        reply_markup=keyboard,
    )


@dp.callback_query_handler(lambda c: c.data.startswith("confirm_remove_mark_"))
async def confirm_remove_mark_callback(callback_query: types.CallbackQuery):
    data_parts = callback_query.data.split("_")
    chat_type = data_parts[3]
    chat_id = int(data_parts[4])
    mark_to_remove = "_".join(data_parts[5:])
    user_id = callback_query.from_user.id

    await remove_mark(admin_id, f"{chat_type}_mark", {"ch_id": chat_id, "mark": mark_to_remove})


    marks = await get_marks(admin_id, chat_id, f"{chat_type}_mark")
    marks_text = "–ú–µ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç." if not marks else "–¢–µ–∫—É—â–∏–µ –º–µ—Ç–∫–∏:\n" + "\n".join(f"- {mark}" for mark in marks)


    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton(text="‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–∫—É", callback_data=f"add_mark_{chat_type}_{chat_id}"),
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–µ—Ç–∫—É", callback_data=f"remove_mark_{chat_type}_{chat_id}")
    )
    keyboard.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"chats_groups")
    )
    try:
        await drop_column("users", mark_to_remove)
    except asyncpg.exceptions.UndefinedColumnError as e:
        print("Error: ", e)
    except ValueError as e:
        print(f"–û—à–∏–±–∫–∞ ValueError: {e}")
    await bot.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É —Å ID: {chat_id}\n\n–ú–µ—Ç–∫–∞ '{mark_to_remove}' —É–¥–∞–ª–µ–Ω–∞.\n\n{marks_text}",
        chat_id=user_id,
        message_id=callback_query.message.message_id,
        reply_markup=keyboard,
    )


@dp.callback_query_handler(lambda c: c.data == 'chats_channels')
async def userbots_callback(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    message_id = callback_query.message.message_id
    user_chats = await get_user_chats_from_db(chat_id, chat_type="channels")

    print(f"User chats: {user_chats}")

    try:
        user_chats = [json.loads(chat) if isinstance(chat, str) else chat for chat in user_chats]
    except json.JSONDecodeError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON: {e}")
        return

    if not user_chats:
        print("–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
                            [InlineKeyboardButton(
                                text=str(chat["title"]) if isinstance(chat["title"], str) else str(
                                    chat["title"].get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")),
                                callback_data=f"chat_channels_{chat['id']}"
                            )]
                            for chat in user_chats
                        ] + [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_chats")]]
    )

    await bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:", chat_id=chat_id, message_id=message_id, reply_markup=keyboard
    )


@dp.callback_query_handler(lambda c: c.data.startswith("chat_"))
async def handle_channel_selection(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        data_parts = callback_query.data.split("_")
        chat_type = "channels"
        chat_id = int(data_parts[2])
        print(chat_id)
        user_id = callback_query.from_user.id
        print(user_id)

        user_chats = await get_channels_from_db(user_id)
        selected_chat = next((chat for chat in user_chats if chat["id"] == chat_id), None)

        if not selected_chat:
            await bot.answer_callback_query(callback_query.id, text="–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return


        await state.update_data(chat_id=chat_id)

        chat_title = selected_chat["title"]["title"] if isinstance(selected_chat["title"], dict) else selected_chat["title"]

        marks = await get_marks(admin_id, chat_id, f"{chat_type}_mark")

        marks_text = "–ú–µ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç." if not marks else "–¢–µ–∫—É—â–∏–µ –º–µ—Ç–∫–∏:\n" + "\n".join(f"- {mark}" for mark in marks)

        keyboard = InlineKeyboardMarkup()
        keyboard.row(
            InlineKeyboardButton(text="‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–∫—É", callback_data=f"add_mark_{chat_type}_{chat_id}"),
            InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–µ—Ç–∫—É", callback_data=f"remove_mark_{chat_type}_{chat_id}")
        )
        keyboard.row(
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="chats_channels")
        )


        await bot.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞–Ω–∞–ª —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º: {chat_title}\n\n{marks_text}",
            chat_id=user_id,
            message_id=callback_query.message.message_id,
            reply_markup=keyboard,
        )

    except Exception as e:
        await bot.answer_callback_query(callback_query.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")



@dp.callback_query_handler(lambda c: c.data.startswith("add_mark_"))
async def add_mark_callback(callback_query: types.CallbackQuery, state: FSMContext):
    data_parts = callback_query.data.split("_")
    chat_type = data_parts[2]
    chat_id = int(data_parts[3])
    user_id = callback_query.from_user.id


    user_chats = await get_user_chats_from_db(user_id, chat_type=chat_type)
    selected_chat = next((chat for chat in user_chats if chat["id"] == chat_id), None)

    if not selected_chat:
        await bot.answer_callback_query(callback_query.id, text="–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return


    chat_title = selected_chat["title"] if isinstance(selected_chat["title"], str) else selected_chat["title"].get(
        "title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")


    await bot.answer_callback_query(callback_query.id)
    await state.set_state(MarkState.waiting_for_mark)


    await state.update_data(chat_id=chat_id)


    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"chat_{chat_type}_{chat_id}")],
        ]
    )


    await bot.edit_message_text(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –º–µ—Ç–∫—É –¥–ª—è –∫–∞–Ω–∞–ª–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º: {chat_title}:",
        chat_id=user_id,
        message_id=callback_query.message.message_id,
        reply_markup=keyboard,
    )


@dp.message_handler(state=MarkState.waiting_for_mark)
async def process_new_mark(msg: types.Message, state: FSMContext):
    new_mark = msg.text.strip()
    user_id = msg.from_user.id


    data = await state.get_data()
    chat_id = data.get("chat_id")

    if not chat_id:
        await bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if not new_mark:
        await bot.send_message(user_id, "–ú–µ—Ç–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return


    existing_marks = await get_marks(admin_id, chat_id, f"channels_mark")


    if new_mark in existing_marks:
        await bot.send_message(user_id, f"–ú–µ—Ç–∫–∞ '{new_mark}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
        return


    await add_mark(admin_id, chat_id, f"channels_mark", new_mark)


    marks = await get_marks(admin_id, chat_id, f"channels_mark")
    marks_text = "–ú–µ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç." if not marks else "–¢–µ–∫—É—â–∏–µ –º–µ—Ç–∫–∏:\n" + "\n".join(f"- {mark}" for mark in marks)


    await state.finish()


    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton(text="‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–∫—É", callback_data=f"add_mark_channels_{chat_id}"),
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–µ—Ç–∫—É", callback_data=f"remove_mark_channels_{chat_id}")
    )
    keyboard.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"chats_channels")
    )

    await add_column("users", new_mark)

    await bot.send_message(
        user_id,
        f"–ú–µ—Ç–∫–∞ '{new_mark}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.\n\n{marks_text}",
        reply_markup=keyboard
    )


@dp.callback_query_handler(lambda c: c.data.startswith("remove_mark_"))
async def remove_mark_callback(callback_query: types.CallbackQuery):
    data_parts = callback_query.data.split("_")
    chat_type = data_parts[2]
    chat_id = int(data_parts[3])
    user_id = callback_query.from_user.id


    marks = await get_marks(admin_id, chat_id, f"{chat_type}_mark")
    if not marks:
        await bot.answer_callback_query(callback_query.id, text="–ù–µ—Ç –º–µ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return


    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=mark, callback_data=f"confirm_remove_mark_{chat_type}_{chat_id}_{mark}")]
            for mark in marks
        ]
    )

    await bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        chat_id=user_id,
        message_id=callback_query.message.message_id,
        reply_markup=keyboard,
    )


@dp.callback_query_handler(lambda c: c.data.startswith("confirm_remove_mark_"))
async def confirm_remove_mark_callback(callback_query: types.CallbackQuery):
    data_parts = callback_query.data.split("_")
    chat_type = data_parts[3]
    chat_id = int(data_parts[4])
    mark_to_remove = "_".join(data_parts[5:])
    user_id = callback_query.from_user.id

    await remove_mark(admin_id, f"{chat_type}_mark", {"ch_id": chat_id, "mark": mark_to_remove})


    marks = await get_marks(admin_id, chat_id, f"{chat_type}_mark")
    marks_text = "–ú–µ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç." if not marks else "–¢–µ–∫—É—â–∏–µ –º–µ—Ç–∫–∏:\n" + "\n".join(f"- {mark}" for mark in marks)


    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton(text="‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–∫—É", callback_data=f"add_mark_{chat_type}_{chat_id}"),
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–µ—Ç–∫—É", callback_data=f"remove_mark_{chat_type}_{chat_id}")
    )
    keyboard.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"chats_channels")
    )
    try:
        await drop_column("users", mark_to_remove)
    except asyncpg.exceptions.UndefinedColumnError as e:
        print("Error: ", e)
    except ValueError as e:
        print(f"–û—à–∏–±–∫–∞ ValueError: {e}")
    await bot.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞–Ω–∞–ª —Å ID: {chat_id}\n\n–ú–µ—Ç–∫–∞ '{mark_to_remove}' —É–¥–∞–ª–µ–Ω–∞.\n\n{marks_text}",
        chat_id=user_id,
        message_id=callback_query.message.message_id,
        reply_markup=keyboard,
    )

@dp.callback_query_handler(lambda c: c.data == 'stats')
async def userbots_callback(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    message_id = callback_query.message.message_id

    groups_stat = await get_stat(admin_id, "groups_stat")
    supergroups_stat = await get_stat(admin_id, "supergroups_stat")
    channels_stat = await get_stat(admin_id, "channels_stat")
    total_stat = groups_stat + supergroups_stat + channels_stat

    status_text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:\n\n"
        f"üë• –ì—Ä—É–ø–ø—ã: {groups_stat}\n"
        f"üë• –°—É–ø–µ—Ä-–≥—Ä—É–ø–ø—ã: {supergroups_stat}\n"
        f"üì¢ –ö–∞–Ω–∞–ª—ã: {channels_stat}\n\n"
        f"üí¨ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_stat}"
    )
    await bot.edit_message_text(status_text, chat_id, message_id, reply_markup=await stats_back_cb())


@dp.callback_query_handler(lambda c: c.data == 'back_to_menu')
async def userbots_callback(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    message_id = callback_query.message.message_id
    await bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—é—é –≤–∞—Å —Ñ—É–Ω–∫—Ü–∏—é:", chat_id, message_id,  reply_markup=await menu_cl())


def main():
    init_db()
    executor.start_polling(dp, skip_updates=True)

if __name__ == "__main__":
    main()