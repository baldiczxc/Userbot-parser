"""–ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ User-–ë–æ—Ç –¥–ª—è Telegram"""
import time
import logging
from pyrogram import Client, filters, idle
from config import *
import g4f, asyncio
from database import *

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler(), logging.FileHandler("./userbot.log", mode="w")],
)
logger = logging.getLogger(__name__)

usb = Client("userbot", api_id=api_id, api_hash=api_hash, phone_number=phone_number)
allowed_chat_types = ["ChatType.GROUP", "ChatType.SUPERGROUP", "ChatType.CHANNEL"]
start_time = time.time()


@usb.on_message(filters.command("ping", prefixes="//"))
async def ping(client, msg):
    """Ping function"""
    logger.info(
        "–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ //ping –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d (%s)",
        msg.from_user.id,
        msg.from_user.username,
    )

    if await check_for_admin(msg.from_user.id):
        await msg.delete()

        bot_info = await client.get_me()
        bot_username = bot_info.username
        bot_id = bot_info.id

        sent_time = time.time()
        sent_message = await msg.reply_text("üöÄPong!üèì")
        received_time = time.time()
        ping_time = (received_time - sent_time) * 1000

        await sent_message.edit_text(
            f"üöÄPong! üèì\n"
            f"ü§ñ –Æ–∑–µ—Ä-–ë–æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞: @{bot_username} (ID: {bot_id})\n"
            f"‚ö°–°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–∫–ª–∏–∫–∞ Telegram: {ping_time:.2f} –º—Å\n"
            f"‚è± –í—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {await custom_format_time(time.time() - start_time)}"
        )

        logger.info(
            "–û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É //ping –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d", msg.from_user.id
        )
    else:
        await msg.delete()
        await msg.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã //ping.")
        logger.warning(
            "%d (%s) –ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É //ping.",
            msg.from_user.id,
            msg.from_user.username,
        )


async def check_for_admin(chat_id):
    """Checking administrator rights"""
    return chat_id == admin_id


async def custom_format_time(seconds):
    """A block for managing the date and time format"""
    days = int(seconds // (24 * 3600))
    hours = int((seconds % (24 * 3600)) // 3600)
    minutes = int((seconds % 3600) // 60)
    seconds = int(seconds % 60)
    formatted_time = f"{days}–¥ {hours}—á {minutes}–º {seconds}—Å"
    return formatted_time


async def get_all_chats():
    async for chat in usb.get_dialogs():
        ch_type = str(chat.chat.type)
        ch_id = chat.chat.id
        ch_title = chat.chat.title
        if ch_type in allowed_chat_types:
            group_info = {"ch_id": ch_id, "title": ch_title}
            if ch_type == "ChatType.GROUP":
                check_ch = await check_group(admin_id, ch_id, "groups")
                if not check_ch:
                    await add_ch_info(admin_id, ch_id, group_info, "groups", "title")
                print(group_info)
            elif ch_type == "ChatType.SUPERGROUP":
                check_ch = await check_group(admin_id, ch_id, "supergroups")
                if not check_ch:
                    await add_ch_info(admin_id, ch_id, group_info, "supergroups", "title")
                print(group_info)
            elif ch_type == "ChatType.CHANNEL":
                check_ch = await check_group(admin_id, ch_id, "channels")
                if not check_ch:
                    await add_ch_info(admin_id, ch_id, group_info, "channels", "title")
                print(group_info)


@usb.on_message(filters.command("grab_msg", prefixes="//"))
async def fetch_full_history(client, message):
    print("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö —á–∞—Ç–æ–≤...")

    try:
        async for dialog in usb.get_dialogs():
            ch_id = dialog.chat.id
            ch_title = dialog.chat.title
            ch_type = str(dialog.chat.type)

            print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞—Ç: {ch_title} (ID: {ch_id}, –¢–∏–ø: {ch_type})")


            if ch_type == "ChatType.GROUP":
                ch_type_db = "groups_msg"
                markers_column = "groups_mark"
            elif ch_type == "ChatType.SUPERGROUP":
                ch_type_db = "supergroups_msg"
                markers_column = "supergroups_mark"
            elif ch_type == "ChatType.CHANNEL":
                ch_type_db = "channels_msg"
                markers_column = "channels_mark"
            else:
                print(f"–¢–∏–ø —á–∞—Ç–∞ {ch_type} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
                continue

            print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —Ç–∞–±–ª–∏—Ü–∞: {ch_type_db}")


            markers = await get_marks(admin_id, ch_id, markers_column)
            if not markers:
                print(f"–ú–∞—Ä–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —á–∞—Ç–∞ {ch_title}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue


            await initialize_jsonb_column(admin_id, ch_type_db)

            total_msg = 0

            try:
                async for msg in usb.get_chat_history(ch_id):
                    total_msg += 1
                    if not msg.text:
                        continue

                    check_ms = await check_msg(admin_id, msg.text, ch_type_db)
                    if not check_ms:
                        for word in markers:
                            if word in msg.text:
                                processed_text = await send_processing(msg.text)
                                print(f"–î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {ch_type_db}: {processed_text}")
                                await add_ch_info(
                                    admin_id,
                                    ch_id,
                                    processed_text,
                                    ch_type_db,
                                    "text",
                                )
                    await asyncio.sleep(0.5)
                print(f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ {ch_title}: {total_msg}")
            except Exception as e:
                print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞—Ç–∞ {ch_title}: {e}")
                continue

    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤: {e}")
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


async def send_processing(text):
    def send_response():
        test = """
–ù–∞–∑–≤–∞–Ω–∏–µ: {–ù–ê–ó–í–ê–ù–ò–ï –í–ê–ö–ê–ù–°–ò–ò}
–ó–ü: {–°–£–ú–ú–ê}
–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ: {–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ò–ó –û–ë–¨–Ø–í–õ–ï–ù–ò–Ø –ï–°–õ–ò –ï–°–¢–¨ –ò–ù–ê–ß–ï None}
–ì—Ä–∞—Ñ–∏–∫: {–ì–†–ê–§–ò–ö}
–£–¥–∞–ª–µ–Ω–∫–∞: {True/False}
"""
        result = g4f.ChatCompletion.create(
            model=g4f.models.gpt_4o,
            messages=[
                {
                    "role": "user",
                    "content": f"–°–æ–±–µ—Ä–∏ –¥–∞–Ω–Ω—ã–µ –°–¢–†–û–ì–û! –ù–ï –î–û–ë–û–í–õ–Ø–Ø –ù–ï–ß–ï–ì–û –ë–û–õ–ï–ï! –í –û–¢–í–ï–¢–ï –î–ê–ô –¢–û–õ–¨–ö–û –ì–û–¢–û–í–´–ô –û–¢–í–ï–¢. –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ {test} –∏–∑ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
                    + text,
                }
            ],
            web_search=False,
        )
        if isinstance(result, list):
            result = "".join([str(chunk) for chunk in result])
        return result

    response = await asyncio.to_thread(send_response)
    return response


async def process_all_chats():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞."""
    print("–ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö —á–∞—Ç–æ–≤...")

    try:
        async for dialog in usb.get_dialogs():
            ch_id = dialog.chat.id
            ch_title = dialog.chat.title
            ch_type = str(dialog.chat.type)

            print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞—Ç: {ch_title} (ID: {ch_id}, –¢–∏–ø: {ch_type})")


            if (ch_type == "ChatType.GROUP"):
                ch_type_db = "groups_msg"
                markers_column = "groups_mark"
            elif (ch_type == "ChatType.SUPERGROUP"):
                ch_type_db = "supergroups_msg"
                markers_column = "supergroups_mark"
            elif (ch_type == "ChatType.CHANNEL"):
                ch_type_db = "channels_msg"
                markers_column = "channels_mark"
            else:
                print(f"–¢–∏–ø —á–∞—Ç–∞ {ch_type} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
                continue


            markers = await get_marks(admin_id, ch_id, markers_column)
            if not markers:
                print(f"–ú–∞—Ä–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —á–∞—Ç–∞ {ch_title}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue


            await initialize_jsonb_column(admin_id, ch_type_db)

            total_msg = 0

            try:
                async for msg in usb.get_chat_history(ch_id):
                    total_msg += 1
                    if not msg.text:
                        continue

                    check_ms = await check_msg(admin_id, msg.text, ch_type_db)
                    if not check_ms:
                        for word in markers:
                            if word in msg.text:
                                processed_text = await send_processing(msg.text)
                                print(f"–î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {ch_type_db}: {processed_text}")
                                await add_ch_info(
                                    admin_id,
                                    ch_id,
                                    processed_text,
                                    ch_type_db,
                                    "text",
                                )
                    await asyncio.sleep(0.5)
                print(f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ {ch_title}: {total_msg}")
            except Exception as e:
                print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞—Ç–∞ {ch_title}: {e}")
                continue

        print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤: {e}")


@usb.on_message(filters.text)
async def handle_new_message(client, message):
    session_chat_task = await get_user_session_chat_task(admin_id)
    if not session_chat_task:
        await fetch_full_history(client, message)
        await get_all_chats()
        await set_user_session_chat_task(admin_id, True)
        await process_all_chats()

    chat_type = str(message.chat.type)
    if chat_type in allowed_chat_types:
        if chat_type == "ChatType.GROUP":
            text = message.text
            generate = await send_processing(text)
            print(f"{generate}")
            await increment_stat(admin_id, "groups_stat")
        elif chat_type == "ChatType.SUPERGROUP":
            text = message.text
            generate = await send_processing(text)
            print(f"{generate}")
            await increment_stat(admin_id, "supergroups_stat")
        elif chat_type == "ChatType.CHANNEL":
            text = message.text
            generate = await send_processing(text)
            print(f"{generate}")
            await increment_stat(admin_id, "channels_stat")

        await message.reply(f"–°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ —Ç–∏–ø–∞: {chat_type}")


if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    init_db()

    async def on_start():
        await set_user_session_chat_task(admin_id, False)

    async def start_bot():
        await usb.start()
        await on_start()
        logger.info("–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")
        await idle()

    usb.run(start_bot())
